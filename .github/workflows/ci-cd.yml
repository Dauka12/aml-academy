name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  DEPLOY_PATH: '/var/www/amlacademy.kz'

jobs:
  test:
    runs-on: self-hosted
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './client/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./client
        run: |
          npm ci --legacy-peer-deps
          
      - name: Run tests
        working-directory: ./client
        run: |
          npm run test -- --coverage --watchAll=false
          
      - name: Run linting
        working-directory: ./client
        run: |
          npm run lint

  build:
    runs-on: self-hosted
    needs: [test]
    if: always() && (needs.test.result == 'success' || github.event_name == 'push')
    outputs:
      build-success: ${{ steps.build-check.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './client/package-lock.json'
          
      - name: Clean and install dependencies
        working-directory: ./client
        run: |
          # Clean npm cache safely
          npm cache verify
          npm cache clean
          
          # Remove old files for clean install
          rm -rf node_modules package-lock.json
          
          # Install dependencies with legacy peer deps flag to avoid conflicts
          npm install --legacy-peer-deps
          
          # Verify rollup installation, reinstall if missing
          if ! npm ls @rollup/rollup-linux-x64-gnu > /dev/null 2>&1; then
            echo "Installing missing rollup native dependency..."
            npm install @rollup/rollup-linux-x64-gnu --save-optional --legacy-peer-deps
          fi
        
      - name: Build frontend
        working-directory: ./client
        run: |
          npm run build
          
      - name: Verify build output
        id: build-check
        run: |
          if [ -d "client/dist" ] && [ "$(ls -A client/dist)" ]; then
            echo "Build successful - dist directory contains files"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "Build failed - dist directory is empty or missing"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: client/dist/
          retention-days: 1

  deploy:
    runs-on: self-hosted
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build.outputs.build-success == 'true'
    environment: production
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: ./dist
          
      - name: Backup current deployment
        run: |
          if [ -d "${{ env.DEPLOY_PATH }}" ]; then
            echo "Creating backup of current deployment..."
            sudo cp -r ${{ env.DEPLOY_PATH }} ${{ env.DEPLOY_PATH }}.backup.$(date +%Y%m%d_%H%M%S)
            # Keep only last 3 backups
            sudo find $(dirname ${{ env.DEPLOY_PATH }}) -name "$(basename ${{ env.DEPLOY_PATH }}).backup.*" -type d | sort | head -n -3 | xargs -r sudo rm -rf
          fi
          
      - name: Deploy to web server
        run: |
          # Create directory if it doesn't exist
          sudo mkdir -p ${{ env.DEPLOY_PATH }}
          
          # Remove old files
          sudo rm -rf ${{ env.DEPLOY_PATH }}/*
          
          # Copy build files to Nginx serve directory
          sudo cp -r ./dist/* ${{ env.DEPLOY_PATH }}/
          
          # Set proper permissions
          sudo chown -R www-data:www-data ${{ env.DEPLOY_PATH }}/
          sudo chmod -R 755 ${{ env.DEPLOY_PATH }}/
          
      - name: Verify deployment
        run: |
          if [ -f "${{ env.DEPLOY_PATH }}/index.html" ]; then
            echo "✅ Deployment successful - index.html found"
          else
            echo "❌ Deployment failed - index.html not found"
            exit 1
          fi
          
      - name: Health check
        run: |
          # Wait a moment for the server to pick up new files
          sleep 5
          
          # Basic health check (adjust URL as needed)
          if curl -f -s http://localhost > /dev/null; then
            echo "✅ Health check passed"
          else
            echo "⚠️ Health check failed - site may not be accessible"
          fi

  cleanup:
    runs-on: self-hosted
    needs: [deploy]
    if: always()
    steps:
      - name: Cleanup Docker resources
        run: |
          # Remove unused Docker images to free up space
          echo "Cleaning up unused Docker images..."
          docker image prune -f --filter "dangling=true"
          
          # Optional: Remove specific images related to this project
          if docker images | grep -q "localhost/afm-academy-frontend"; then
            echo "Removing old frontend Docker images..."
            docker rmi $(docker images --filter=reference="localhost/afm-academy-frontend:*" -q) || true
          fi
          
      - name: Clean build artifacts
        run: |
          # Remove build artifacts to save space
          rm -rf ./dist