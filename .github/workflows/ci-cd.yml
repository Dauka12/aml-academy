name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  DEPLOY_PATH: '/var/www/amlacademy.kz'

jobs:
  test:
    runs-on: self-hosted
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        working-directory: ./client
        run: |
          # Удаляем проблемные файлы для чистой установки
          rm -rf node_modules package-lock.json
          
          # Устанавливаем зависимости
          npm install --no-audit --progress=false
          
          # Принудительно устанавливаем rollup зависимость для Linux
          npm install @rollup/rollup-linux-x64-gnu --save-optional --force
          
      - name: Run tests
        working-directory: ./client
        run: npm run test

  build-and-deploy:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Free up memory before deploy
        run: |
          echo "Freeing memory before deployment..."
          # Очистить системный кеш
          sudo sync && sudo sysctl vm.drop_caches=3
          # Показать доступную память
          free -h
          
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        working-directory: ./client
        run: |
          # Удаляем проблемные файлы для чистой установки
          rm -rf node_modules package-lock.json
          
          # Устанавливаем зависимости
          npm install --no-audit --progress=false
          
          # Принудительно устанавливаем rollup зависимость для Linux
          npm install @rollup/rollup-linux-x64-gnu --save-optional --force
          
      - name: Run tests
        working-directory: ./client
        run: npm run test
        
      - name: Build frontend with memory limit
        working-directory: ./client
        run: |
          # Ограничиваем память для Node.js
          export NODE_OPTIONS="--max-old-space-size=2048"
          npm run build
          
      - name: Verify build
        run: |
          if [ ! -d "client/dist" ] || [ -z "$(ls -A client/dist)" ]; then
            echo "❌ Build failed - dist directory is missing or empty"
            exit 1
          fi
          echo "✅ Build successful - dist directory contains files"
          
      - name: Deploy to web server
        run: |
          # Создать бэкап текущей версии (на случай отката)
          if [ -d "${{ env.DEPLOY_PATH }}" ]; then
            sudo mv ${{ env.DEPLOY_PATH }} ${{ env.DEPLOY_PATH }}.backup.$(date +%s)
          fi
          
          # Создать директорию
          sudo mkdir -p ${{ env.DEPLOY_PATH }}
          
          # Копировать новые файлы
          sudo cp -r client/dist/* ${{ env.DEPLOY_PATH }}/
          
          # Установить права
          sudo chown -R www-data:www-data ${{ env.DEPLOY_PATH }}/
          sudo chmod -R 755 ${{ env.DEPLOY_PATH }}/
          
      - name: Verify deployment
        run: |
          if [ -f "${{ env.DEPLOY_PATH }}/index.html" ]; then
            echo "✅ Deployment successful - index.html found"
          else
            echo "❌ Deployment failed - index.html not found"
            exit 1
          fi
          
      - name: Cleanup old backups and free memory
        run: |
          # Удалить старые бэкапы (оставить только последние 3)
          sudo find $(dirname ${{ env.DEPLOY_PATH }}) -name "$(basename ${{ env.DEPLOY_PATH }}).backup.*" -type d | sort -r | tail -n +4 | sudo xargs rm -rf
          
          # Очистить npm кеш если занимает много места
          npm cache clean --force
          
          # Очистить системные логи
          sudo journalctl --vacuum-time=7d
          
          # Показать итоговое состояние памяти
          echo "Final memory state:"
          free -h