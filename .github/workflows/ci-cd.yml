name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  DEPLOY_PATH: '/var/www/amlacademy.kz'

jobs:
  test:
    runs-on: self-hosted
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        working-directory: ./client
        run: |
          # Try npm ci first, fallback to npm install if it fails
          npm ci || npm install
          
      - name: Run tests
        working-directory: ./client
        run: npm run test

  build-and-deploy:
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        working-directory: ./client
        run: |
          # Clean install approach
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi
          
      - name: Run tests
        working-directory: ./client
        run: npm run test
        
      - name: Build frontend
        working-directory: ./client
        run: npm run build
        
      - name: Verify build
        run: |
          if [ ! -d "client/dist" ] || [ -z "$(ls -A client/dist)" ]; then
            echo "❌ Build failed - dist directory is missing or empty"
            exit 1
          fi
          echo "✅ Build successful - dist directory contains files"
          
      - name: Deploy to web server
        run: |
          # Create directory if it doesn't exist
          mkdir -p ${{ env.DEPLOY_PATH }}
          
          # Remove old files
          rm -rf ${{ env.DEPLOY_PATH }}/*
          
          # Copy build files to Nginx serve directory
          cp -r client/dist/* ${{ env.DEPLOY_PATH }}/
          
          # Set proper permissions (uncomment if needed)
          # chown -R www-data:www-data ${{ env.DEPLOY_PATH }}/
          # chmod -R 755 ${{ env.DEPLOY_PATH }}/
          
      - name: Verify deployment
        run: |
          if [ -f "${{ env.DEPLOY_PATH }}/index.html" ]; then
            echo "✅ Deployment successful - index.html found"
          else
            echo "❌ Deployment failed - index.html not found"
            exit 1
          fi
          
      - name: Remove Docker services
        run: |
          # Remove the Docker service if it exists
          if docker stack ls | grep -q "afm-academy"; then
            echo "Removing Docker stack services..."
            docker stack rm afm-academy
            # Wait for services to be removed
            sleep 10
          fi
          
      - name: Cleanup Docker resources
        run: |
          # Remove unused Docker images to free up space
          echo "Cleaning up unused Docker images..."
          docker image prune -f --filter "dangling=true"
          
          # Optional: Remove specific images related to this project
          if docker images | grep -q "localhost/afm-academy-frontend"; then
            echo "Removing old frontend Docker images..."
            docker rmi $(docker images --filter=reference="localhost/afm-academy-frontend:*" -q) || true
          fi